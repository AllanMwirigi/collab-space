[{"/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/reportWebVitals.js":"1","/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/pages/Workspace.js":"2","/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/pages/Credentials.js":"3","/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/utils/socketio-client.js":"4","/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/utils/utils.js":"5","/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/App.js":"6","/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/index.js":"7","/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/components/Chat.js":"8","/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/components/Whiteboard.tsx":"9","/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/components/Meeting.js":"10","/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/utils/peer-conn.js":"11"},{"size":362,"mtime":1608462141677,"results":"12","hashOfConfig":"13"},{"size":1947,"mtime":1609750023152,"results":"14","hashOfConfig":"13"},{"size":3403,"mtime":1609773965528,"results":"15","hashOfConfig":"13"},{"size":467,"mtime":1609773965533,"results":"16","hashOfConfig":"13"},{"size":1563,"mtime":1609763108103,"results":"17","hashOfConfig":"13"},{"size":1547,"mtime":1609773965489,"results":"18","hashOfConfig":"13"},{"size":500,"mtime":1608462141674,"results":"19","hashOfConfig":"13"},{"size":2512,"mtime":1609773965491,"results":"20","hashOfConfig":"13"},{"size":7278,"mtime":1609773965525,"results":"21","hashOfConfig":"13"},{"size":8837,"mtime":1609939506109,"results":"22","hashOfConfig":"13"},{"size":5596,"mtime":1609827135422,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"q24ca5",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":2,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/reportWebVitals.js",[],["49","50"],"/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/pages/Workspace.js",[],"/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/pages/Credentials.js",[],"/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/utils/socketio-client.js",[],"/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/utils/utils.js",[],"/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/App.js",["51"],"/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/index.js",[],["52","53"],"/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/components/Chat.js",[],"/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/components/Whiteboard.tsx",[],"/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/components/Meeting.js",["54","55","56"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport BounceLoader from 'react-spinners/BounceLoader';\nimport { css } from \"@emotion/core\";\nimport Peer from 'peerjs';\nimport { toast } from 'react-toastify';\nimport { getsocketIoInstance } from '../utils//socketio-client';\nimport { getPeerConfig } from '../utils/utils';\n\nexport default class Meeting extends React.Component {\n  constructor() {\n    super();\n    this.spinnerStyles = css`\n      display: block;\n      align-self: center;\n      position: absolute;\n      top: 40%;\n      z-index: 1000;\n    `;\n    this.state = {\n      loading: false, joined: false, videoDataArr: []\n    }\n    this.peerId = null; this.localPeer = null; this.remotePeers = []; this.videoData = {}; this.quality = 12;\n    this.videoElemRefs = {}; this.peers = {};\n    this.videoContainerRef = React.createRef();\n    this.roomName = sessionStorage.getItem('roomName');\n    this.displayName = sessionStorage.getItem('displayName'); // the name of this user\n    this.socketIo = getsocketIoInstance(this.roomName, this.displayName, 'Meeting');\n  }\n\n  componentDidMount() {\n    // this.socketIo.on('peer-join', (userId) => {\n    //   // another user/peer has joined the call\n    // });\n  }\n\n  componentDidUpdate() {\n    for (let item of this.state.videoDataArr) {\n      this.videoElemRefs[item.id].srcObject = item.stream;\n      console.log('componentDidUpdate', item.id);\n    }\n  }\n\n  initConnection = async () => {\n    this.setState({ loading: true });\n    const peerConfig = getPeerConfig();\n    this.localPeer = new Peer('', { host: peerConfig.host, port: peerConfig.port, path: '/peertc' });\n    this.localPeer.on('open', (id) => {\n      console.log('local peer connected', id);\n      this.localPeerId = id;\n      this.initLocalStream(id);\n      // this.socketIo.emit('peer-join', { roomName: this.roomName, peerId: id });\n    });\n    this.localPeer.on('error', (err) => {\n      console.log('local peer connection error', err.message);\n      if (this.localPeer) this.localPeer.reconnect();\n      toast.error('Error initiating meeting', { autoClose: 10000 });\n    })\n  }\n\n  initLocalStream = (localId, enableVideo = true, enableAudio = true) => {\n    const myNavigator = navigator.mediaDevices.getUserMedia || \n    navigator.mediaDevices.webkitGetUserMedia || \n    navigator.mediaDevices.mozGetUserMedia || \n    navigator.mediaDevices.msGetUserMedia;\n    myNavigator({\n      video: enableVideo ? {\n        frameRate: this.quality,\n        noiseSuppression: true,\n        width: {min: 640, ideal: 1280, max: 1920},\n        height: {min: 480, ideal: 720, max: 1080}\n      } : false,\n      audio: enableAudio,\n    })\n    .then((stream) => {\n      if (stream) {\n        this.createVideo({ id: localId, stream });\n        this.listenForPeers(stream);\n        this.socketIo.emit('peer-join', { roomName: this.roomName, peerId: localId });\n        // this.socketIo.on('peer-join', (otherPeerId) => {\n        //   console.log('socket New peer joined', otherPeerId);\n        //   this.connectToNewUser(otherPeerId, stream);\n        // });\n        this.socketIo.on('peer-join', (workspacePeers) => {\n          console.log('socket New peer joined', workspacePeers);\n          this.connectToNewUser(otherPeerId, stream);\n        });\n      }\n    })\n    .catch(error => {\n      console.log('init stream error', error.message);\n      toast.error('Error initiating meeting', { autoClose: 10000 });\n    });\n  }\n\n  createVideo = (data) => {\n    // only add peers that do not exist into videoDataArr\n    if (this.peers[data.id] == null) {\n      this.setState(prevState => ({\n        videoDataArr: [...prevState.videoDataArr, data] // add new data to state array\n      }))\n      this.peers[data.id] = data.id;\n    }\n    \n    if (this.localPeerId === data.id) {\n      this.setState({ loading: false, joined: true }); // hide loader, show end call btn\n    }\n    return;\n\n    if (this.videoData[data.id] == null) {\n      this.videoData[data.id] = { ...data,  };\n      const videoElem = React.createElement('video', { \n        ref: ref => this.videoElemRefs[data.id] = ref, // ref: this.videoElemRefs[data.id], \n        className: 'video-elem', id: data.id, autoPlay: true,\n        // srcObject: this.videoData[data.id].stream, // not allowed by React, so used the ref instead\n      });\n      const videoWrapper = React.createElement('div', { className: 'video-wrapper' }, videoElem);\n      ReactDOM.render(videoWrapper, document.getElementById('video-container'));\n      this.videoElemRefs[data.id].srcObject = this.videoData[data.id].stream;\n      if (this.localPeerId === data.id) {\n        this.setState({ loading: false, joined: true }); // hide loader, show end call btn\n        this.videoElemRefs[data.id].muted = true; // prevent user from hearing themselves i.e. audio being played back to them\n      }\n    } else {\n      const elemRef = this.videoElemRefs[data.id];\n      if (elemRef != null) {\n        elemRef.srcObject = data.stream\n      }\n    }\n  }\n\n  listenForPeers = (localStream) => {\n    // listening for any incoming video stream from another user and will stream our data in peer.answer(ourStream).\n    this.localPeer.on('call', (call) => {\n      call.answer(localStream);\n      call.on('stream', (userVideoStream) => {\n        console.log('new call from', call.metadata.id)\n        this.createVideo({ id: call.metadata.id, stream: userVideoStream });\n      });\n      call.on('close', () => {\n        console.log('closing peers listeners', call.metadata.id);\n        this.removeVideo(call.metadata.id);\n      });\n      call.on('error', (err) => {\n        console.log('peer error', err.message);\n        this.removeVideo(call.metadata.id);\n      });\n      this.remotePeers[call.metadata.id] = call;\n    });\n  }\n\n  connectToNewUser(otherPeerId, stream) {\n    if (peers[otherPeerId] == null) {\n      const call = this.localPeer.call(otherPeerId, stream, { metadata: { id: this.localPeerId }});\n      call.on('stream', (userVideoStream) => {\n        console.log('other user streaming', otherPeerId);\n        this.createVideo({ id: otherPeerId, stream: userVideoStream });\n      });\n      call.on('close', () => {\n        console.log('other peer closed', otherPeerId);\n        this.removeVideo(otherPeerId);\n      });\n      call.on('error', (err) => {\n        console.log('peer error', err.message)\n        this.removeVideo(otherPeerId);\n      })\n      this.remotePeers[otherPeerId] = call;\n    }\n  }\n  removeVideo = (id) => {\n    delete this.videoData[id];\n    const elemRef = this.videoElemRefs[id];\n    if (elemRef != null) {\n      elemRef.remove();\n      delete this.videoElemRefs[id];\n    }\n  }\n  destoryConnection = () => {\n    const data = this.videoData[this.localPeerId];\n    if (data != null && data.stream != null && data.stream.getTracks() != null) {\n      data.stream.getTracks().forEach((track) => {\n        track.stop();\n      })\n    }\n    \n    this.socketIo.emit('peer-leave', { roomName: this.roomName, peerId: this.localPeerId });\n    // this.localPeer.disconnect();\n    // this.localPeer.destroy();\n    // this.localPeer = null;\n  }\n\n  leaveCall = () => {\n    this.destoryConnection();\n    // this.removeVideo(this.localPeerId);\n    // this.videoData = {};\n    // // loop through the remaining video refs and remove them\n    // Object.keys(this.videoElemRefs).forEach(id => {\n    //   const elemRef = this.videoElemRefs[id];\n    //   if (elemRef != null) {\n    //     elemRef.remove();\n    //   }\n    // });\n    this.videoElemRefs = {}; this.peers = {};\n    this.setState({ videoDataArr: [], joined: false });\n  }\n\n  render() {\n    const { loading, joined, videoDataArr } = this.state;\n    const videoElems = videoDataArr.map((data) => {\n      const elem = (\n        <div className=\"video-wrapper\" key={data.id}>\n          <video className=\"video-elem\" id={data.id} autoPlay muted={data.id === this.localPeerId}\n            ref={ref => this.videoElemRefs[data.id] = ref}>\n          </video>\n        </div>\n      );\n      // this.videoElemRefs[data.id].srcObject = data.stream;\n      return elem;\n    });\n    \n    return(\n      <div className=\"meeting-component\">\n        <h4>Meeting</h4>\n        <div className=\"meeting-container\">\n        {/* <div id=\"video-container\" ref={this.videoContainerRef}> */}\n          { !loading && !joined && <button className=\"call-btn\" onClick={this.initConnection}>Start Call</button> }\n          { loading && !joined && <BounceLoader loading={loading} color=\"#36d7b7\" css={this.spinnerStyles} size={100} /> }\n          {/* { joined &&  <div id=\"video-container\" ref={this.videoContainerRef}></div> } */}\n          <div id=\"video-container\" ref={this.videoContainerRef}>\n            { videoElems }\n          </div>\n          { joined && <button className=\"end-call-btn\" onClick={this.leaveCall}>End Call</button> }\n        </div>\n      </div>\n    );\n  }\n}","/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/utils/peer-conn.js",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":1,"column":26,"nodeType":"63","messageId":"64","endLine":1,"endColumn":35},{"ruleId":"57","replacedBy":"65"},{"ruleId":"59","replacedBy":"66"},{"ruleId":"67","severity":2,"message":"68","line":86,"column":33,"nodeType":"63","messageId":"69","endLine":86,"endColumn":44},{"ruleId":"70","severity":1,"message":"71","line":110,"column":5,"nodeType":"72","messageId":"73","endLine":129,"endColumn":6},{"ruleId":"67","severity":2,"message":"74","line":153,"column":9,"nodeType":"63","messageId":"69","endLine":153,"endColumn":14},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar",["75"],["76"],"no-undef","'otherPeerId' is not defined.","undef","no-unreachable","Unreachable code.","IfStatement","unreachableCode","'peers' is not defined.","no-global-assign","no-unsafe-negation"]