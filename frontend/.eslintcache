[{"/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/reportWebVitals.js":"1","/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/components/Whiteboard.js":"2","/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/pages/Workspace.js":"3","/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/pages/Credentials.js":"4","/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/utils/socketio-client.js":"5","/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/utils/utils.js":"6","/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/App.js":"7","/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/index.js":"8"},{"size":362,"mtime":1608462141677,"results":"9","hashOfConfig":"10"},{"size":2770,"mtime":1609404482791,"results":"11","hashOfConfig":"10"},{"size":426,"mtime":1609318380001,"results":"12","hashOfConfig":"10"},{"size":2280,"mtime":1609402237802,"results":"13","hashOfConfig":"10"},{"size":440,"mtime":1609408163899,"results":"14","hashOfConfig":"10"},{"size":1214,"mtime":1609407925909,"results":"15","hashOfConfig":"10"},{"size":480,"mtime":1608472327878,"results":"16","hashOfConfig":"10"},{"size":500,"mtime":1608462141674,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1mwndxm",{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/reportWebVitals.js",[],["38","39"],"/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/components/Whiteboard.js",["40","41"],"import React,{ useState, useEffect } from \"react\";\nimport { ReactSketchCanvas } from \"react-sketch-canvas\";\nimport ReactTooltip from 'react-tooltip';\nimport { getsocketIoInstance } from '../utils/socketio-client';\n\nexport default class Whiteboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.styles = {\n      border: \"0.0625rem solid #9c9c9c\",\n      borderRadius: \"0.25rem\",\n    };\n    this.canvas = React.createRef();\n    this.state = {\n      eraseMode: false\n    }\n    this.WhiteBoardMsgType = {\n      canvas_draw: 1,\n      canvas_undo: 2,\n      canvas_redo: 3,\n      canvas_clear: 4,\n    }\n    this.roomName = sessionStorage.getItem('roomName');\n    this.socketIo = getsocketIoInstance(this.roomName, 'Whiteboard');\n  }\n\n  componentDidMount() {\n    this.socketIo.on('whiteboard', (changes) => {\n      console.log('whiteboard updated', changes);\n    });\n  }\n\n  whiteBoardUpdated = (drawUpdates) => {\n    // console.log(data);\n    const changes = { roomName: this.roomName, type: this.WhiteBoardMsgType.canvas_draw, drawUpdates }\n    this.socketIo.emit('whiteboard', changes);\n  }\n  toggleEraseMode = () => {\n    this.canvas.current.eraseMode(!this.state.eraseMode);\n    this.setState({ eraseMode: !this.state.eraseMode })\n  }\n  undoCanvas = () => {\n    this.canvas.current.undo();\n    const changes = { roomName: this.roomName, type: this.WhiteBoardMsgType.canvas_undo }\n    this.socketIo.emit('whiteboard', changes);\n  }\n  redoCanvas = () => {\n    this.canvas.current.redo();\n    const changes = { roomName: this.roomName, type: this.WhiteBoardMsgType.canvas_redo }\n    this.socketIo.emit('whiteboard', changes);\n  }\n  clearCanvas = () => {\n    this.canvas.current.clearCanvas();\n    const changes = { roomName: this.roomName, type: this.WhiteBoardMsgType.canvas_clear }\n    this.socketIo.emit('whiteboard', changes);\n  }\n\n  render() {\n    return (\n      <div className=\"whiteboard\">\n        <h4>Whiteboard</h4>\n        <ReactTooltip place=\"top\" type=\"info\" effect=\"float\"/>\n        <div className=\"whiteboard-icons\">\n          <i className=\"fas fa-undo\" data-tip='Undo' onClick={this.undoCanvas}></i> \n          <i className=\"fas fa-redo\" data-tip='Redo' onClick={this.redoCanvas}></i>\n          <i className=\"fas fa-eraser\" data-tip={this.state.eraseMode ? 'Stop Erase': 'Erase'} \n            onClick={this.toggleEraseMode}></i>\n          <i className=\"fas fa-broom\"data-tip='Clear' onClick={this.clearCanvas}></i>\n        </div>\n        <ReactSketchCanvas\n          ref={this.canvas}\n          style={this.styles}\n          // width=\"600\"\n          // height=\"400\"\n          strokeWidth={4}\n          strokeColor=\"red\"\n          eraserWidth={20}\n          onUpdate={this.whiteBoardUpdated}\n        />\n      </div>\n      \n    );\n  }\n}","/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/pages/Workspace.js",["42","43"],"import React,{ useState, useEffect } from \"react\";\nimport Whiteboard from '../components/Whiteboard';\n\n// https://www.npmjs.com/package/react-canvas-draw - alternative whiteboard option\n// https://www.npmjs.com/package/react-chat-elements\n// https://www.cometchat.com/tutorials/cometchat-react-chat-elements\n\nexport default function Workspace() {\n  return(\n    <div className=\"workspace\">\n      <Whiteboard/>\n    </div>\n  );\n}","/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/pages/Credentials.js",["44"],"import React,{ useState, useEffect } from \"react\";\n\nexport default function Credentials(props) {\n\n  const [roomNameInp, setRoomNameInp] = useState(\"\");\n  // const [passwordInp, setPasswordInp] = useState(\"\");\n  const [requestPending, setRequestPending] = useState(false);\n\n  const submit = async (event) => {\n    event.preventDefault();\n    if(roomNameInp.trim() === '' /* || passwordInp.trim() === '' */ ) {\n      // alert('Fill in all fields');\n      alert('Please enter Room Name');\n      return;\n    }\n    setRequestPending(true);\n    // TODO: send request to backend and create/verify room\n    // TODO: show some fancy loading\n    setTimeout(() => {\n      sessionStorage.setItem('roomName', roomNameInp);\n      setRequestPending(false);\n      props.setVerified(true); // have parent (App.js) change to the next page\n    }, 500);\n  }\n\n  return(\n    <div className=\"limiter\">\n      <div className=\"container-login100\">\n        <div className=\"wrap-login100\">\n          <form className=\"login100-form validate-form p-l-55 p-r-55 p-t-178\" onSubmit={e => submit(e) }>\n            <span className=\"login100-form-title\">\n              Space Details\n            </span>\n\n            <div className=\"wrap-input100 validate-input m-b-16\" data-validate=\"Please enter room name\">\n              <input className=\"input100\" type=\"text\" name=\"room-name\" placeholder=\"Room Name\" \n                value={roomNameInp} onChange={(e) => { setRoomNameInp(e.currentTarget.value.trim()) } }\n              />\n              <span className=\"focus-input100\"></span>\n            </div>\n\n            {/* <div className=\"wrap-input100 validate-input\" data-validate = \"Please enter password\">\n              <input className=\"input100\" type=\"password\" name=\"pass\" placeholder=\"Password\"\n                value={passwordInp} onChange={(e) => setPasswordInp(e.currentTarget.value) }/>\n              <span className=\"focus-input100\"></span>\n            </div> */}\n            <div className=\"container-login100-form-btn\">\n              { !requestPending && <button className=\"login100-form-btn\">\n                Proceed\n              </button> }\n              { requestPending && <span className=\"txt3\">Please wait...</span> }\n            </div> \n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}","/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/utils/socketio-client.js",[],"/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/utils/utils.js",["45","46"],"/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/App.js",[],"/media/allan/SharedVolume/Projects/WebProjects/collab-space/frontend/src/index.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":1,"column":16,"nodeType":"53","messageId":"54","endLine":1,"endColumn":24},{"ruleId":"51","severity":1,"message":"55","line":1,"column":26,"nodeType":"53","messageId":"54","endLine":1,"endColumn":35},{"ruleId":"51","severity":1,"message":"52","line":1,"column":16,"nodeType":"53","messageId":"54","endLine":1,"endColumn":24},{"ruleId":"51","severity":1,"message":"55","line":1,"column":26,"nodeType":"53","messageId":"54","endLine":1,"endColumn":35},{"ruleId":"51","severity":1,"message":"55","line":1,"column":26,"nodeType":"53","messageId":"54","endLine":1,"endColumn":35},{"ruleId":"51","severity":1,"message":"56","line":18,"column":9,"nodeType":"53","messageId":"54","endLine":18,"endColumn":13},{"ruleId":"51","severity":1,"message":"56","line":31,"column":9,"nodeType":"53","messageId":"54","endLine":31,"endColumn":13},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'year' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]